# This is sample IDL schema for GraphQL Faker.
#
# There are two directives you can use to enhance fake data:
#   - @fake
#   - @examples
# Each directive has autocompletion working so start by typing @
#
# Press save or Cmd+Enter to apply the changes and update server. Switch to GraphiQL
# on the left panel to immediately test your changes.
# This tool also supports extending existing APIs. Check graphql-faker --help
#
# Developed with ❤️ by APIs.guru | https://github.com/APIs-guru/graphql-faker

# type Company {
#   name: String @fake(type:companyName)
#   industry: String @examples(values: ["IT", "Manufacturing", "Medicine", "Media"])
#   employees: [Employee!]
# }

enum MyEnum {
  ACTIVE
  DISABLED
}

# User
type User {
  id: ID!
  test(enum:MyEnum): MyEnum

  name: String @fake(type: firstName, locale: en_CA)
  age: Int @fake(type: number)

  description: String @fake(type: lorem)
  avatarUrl(size: Int): String @fake(type: avatarUrl)
  profileUrl: String @fake(type: imageUrl)
  following: [User]
  followers: [User]
  b: String
  c: String
  d: String
}

type B {
  c: Int @examples(values: 1)
  d: Int
}

type A {
  b: B
}

enum Episode {
  NEWHOPE
  EMPIRE
  JEDI
}

interface Test {
  a: String
}

type TestB implements Test {
  a: String
  b: String
}

type TestC implements Test {
  a: String
  c: String
}

union TestOrUser = User | TestB

input InputObj {
  a: String!
}




interface M {
  b(b:String): String
}
type O1 implements M{
  b(b:String): String
  o1:String
}

type O2 implements M {
  b(b:String,a:String):String
  o2:String
}



# Query
type Query {
  m:M
  
  # Current signed in user
  me: User
  # Fetch a user by ID
  user(id: ID): User
  # All users stored in the database
  users(limit: Int): [User!]!

  stringArray:[[String!]]! @fake(type: city)
  
  a: A
  getUser(id: ID): User @deprecated(reason: "use the user field instead")
  getUsers(id: ID): [User!]! @deprecated(reason: "use the users field instead")

  testOrUser: TestOrUser! @examples(values:[{ __typename: User }])

  test: Test

  testWithInput(id: String, ids: [String!]!, input: InputObj): Int
}

type Mutation {
  deleteUser(id: ID!): Int!
}