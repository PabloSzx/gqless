// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { TypeData, InputData, createSchema } from 'gqless'

/**
 * Utility type to convert a GraphQL type string into a Typescript type
 * @example
 *
 *   _<'User'>     ->  User | null
 *   _<'User!'>    ->  User
 *   _<'[User]!'>  ->  (User | null)[]
 */
export type _<
  Name extends string,
  Input = false,
  Cached = true
> = Input extends true
  ? InputData<typeof schema, Name, TypeCache, Cached>
  : TypeData<typeof schema, Name, TypeCache, Cached>

interface TypeCache {
  Query: Query
  M: M
  String: String
  User: User
  ID: ID
  MyEnum: _<'MyEnum!', false, false>
  Int: Int
  A: A
  B: B
  TestOrUser: TestOrUser
  TestB: TestB
  Test: Test
  InputObj: InputObj
  Mutation: Mutation
  __Schema: __Schema
  __Type: __Type
  __TypeKind: _<'__TypeKind!', false, false>
  Boolean: Boolean
  __Field: __Field
  __InputValue: __InputValue
  __EnumValue: __EnumValue
  __Directive: __Directive
  __DirectiveLocation: _<'__DirectiveLocation!', false, false>
  Episode: _<'Episode!', false, false>
  TestC: TestC
  O1: O1
  O2: O2
  fake__Locale: _<'fake__Locale!', false, false>
  fake__Types: _<'fake__Types!', false, false>
  fake__imageSize: fake__imageSize
  fake__loremSize: _<'fake__loremSize!', false, false>
  fake__color: fake__color
  fake__options: fake__options
  Float: Float
  examples__JSON: examples__JSON
}

/** @type Object */
export interface Query extends _<'Query!', false, false> {}

/** @type Interface */
export interface M extends _<'M!', false, false> {}

/** @type Scalar */
export type String = _<'String!', false, false>

/** @type Object */
export interface User extends _<'User!', false, false> {}

/** @type Scalar */
export type ID = _<'ID!', false, false>

export enum MyEnum {
  ACTIVE,
  DISABLED,
}

/** @type Scalar */
export type Int = _<'Int!', false, false>

/** @type Object */
export interface A extends _<'A!', false, false> {}

/** @type Object */
export interface B extends _<'B!', false, false> {}

/** @type Union */
export type TestOrUser = _<'TestOrUser!', false, false>

/**
 * @type Object
 * @implements Test
 */
export interface TestB extends _<'TestB!', false, false> {}

/** @type Interface */
export interface Test extends _<'Test!', false, false> {}

/** @type InputObject */
export interface InputObj extends _<'InputObj!', true, false> {}

/** @type Object */
export interface Mutation extends _<'Mutation!', false, false> {}

/** @type Object */
export interface __Schema extends _<'__Schema!', false, false> {}

/** @type Object */
export interface __Type extends _<'__Type!', false, false> {}

export enum __TypeKind {
  SCALAR,
  OBJECT,
  INTERFACE,
  UNION,
  ENUM,
  INPUT_OBJECT,
  LIST,
  NON_NULL,
}

/** @type Scalar */
export type Boolean = _<'Boolean!', false, false>

/** @type Object */
export interface __Field extends _<'__Field!', false, false> {}

/** @type Object */
export interface __InputValue extends _<'__InputValue!', false, false> {}

/** @type Object */
export interface __EnumValue extends _<'__EnumValue!', false, false> {}

/** @type Object */
export interface __Directive extends _<'__Directive!', false, false> {}

export enum __DirectiveLocation {
  QUERY,
  MUTATION,
  SUBSCRIPTION,
  FIELD,
  FRAGMENT_DEFINITION,
  FRAGMENT_SPREAD,
  INLINE_FRAGMENT,
  VARIABLE_DEFINITION,
  SCHEMA,
  SCALAR,
  OBJECT,
  FIELD_DEFINITION,
  ARGUMENT_DEFINITION,
  INTERFACE,
  UNION,
  ENUM,
  ENUM_VALUE,
  INPUT_OBJECT,
  INPUT_FIELD_DEFINITION,
}

export enum Episode {
  NEWHOPE,
  EMPIRE,
  JEDI,
}

/**
 * @type Object
 * @implements Test
 */
export interface TestC extends _<'TestC!', false, false> {}

/**
 * @type Object
 * @implements M
 */
export interface O1 extends _<'O1!', false, false> {}

/**
 * @type Object
 * @implements M
 */
export interface O2 extends _<'O2!', false, false> {}

export enum fake__Locale {
  az,
  cz,
  de,
  de_AT,
  de_CH,
  en,
  en_AU,
  en_BORK,
  en_CA,
  en_GB,
  en_IE,
  en_IND,
  en_US,
  en_au_ocker,
  es,
  es_MX,
  fa,
  fr,
  fr_CA,
  ge,
  id_ID,
  it,
  ja,
  ko,
  nb_NO,
  nep,
  nl,
  pl,
  pt_BR,
  ru,
  sk,
  sv,
  tr,
  uk,
  vi,
  zh_CN,
  zh_TW,
}

export enum fake__Types {
  zipCode,
  city,
  streetName,
  streetAddress,
  secondaryAddress,
  county,
  country,
  countryCode,
  state,
  stateAbbr,
  latitude,
  longitude,
  colorName,
  productCategory,
  productName,
  money,
  productMaterial,
  product,
  companyName,
  companyCatchPhrase,
  companyBS,
  dbColumn,
  dbType,
  dbCollation,
  dbEngine,
  date,
  pastDate,
  futureDate,
  recentDate,
  financeAccountName,
  financeTransactionType,
  currencyCode,
  currencyName,
  currencySymbol,
  bitcoinAddress,
  internationalBankAccountNumber,
  bankIdentifierCode,
  hackerAbbreviation,
  hackerPhrase,
  imageUrl,
  avatarUrl,
  email,
  url,
  domainName,
  ipv4Address,
  ipv6Address,
  userAgent,
  colorHex,
  macAddress,
  password,
  lorem,
  firstName,
  lastName,
  fullName,
  jobTitle,
  phoneNumber,
  number,
  uuid,
  word,
  words,
  locale,
  filename,
  mimeType,
  fileExtension,
  semver,
}

/** @type InputObject */
export interface fake__imageSize extends _<'fake__imageSize!', true, false> {}

export enum fake__loremSize {
  word,
  words,
  sentence,
  sentences,
  paragraph,
  paragraphs,
}

/** @type InputObject */
export interface fake__color extends _<'fake__color!', true, false> {}

/** @type InputObject */
export interface fake__options extends _<'fake__options!', true, false> {}

/** @type Scalar */
export type Float = _<'Float!', false, false>

/** @type Scalar */
export type examples__JSON = _<'examples__JSON!', false, false>

export const schema = createSchema({
  /** The root query type **/
  $query: 'Query',
  /** The root mutation type **/
  $mutation: 'Mutation',

  /**
   * @name Query
   * @type Object
   */
  Query: {
    m: 'M',
    /** Current signed in user */
    me: 'User',
    /** Fetch a user by ID */
    user: ['User', { id: 'ID' }],
    /** All users stored in the database */
    users: ['[User!]!', { limit: 'Int' }],
    stringArray: '[[String!]]!',
    a: 'A',
    /** @deprecated use the user field instead */
    getUser: ['User', { id: 'ID' }],
    /** @deprecated use the users field instead */
    getUsers: ['[User!]!', { id: 'ID' }],
    testOrUser: 'TestOrUser!',
    test: 'Test',
    testWithInput: [
      'Int',
      { id: 'String', ids: '[String!]!', input: 'InputObj' },
    ],
  },

  /**
   * @name M
   * @type Interface
   */
  M: [
    {
      b: ['String', { b: 'String' }],
    },
    'O1',
    'O2',
  ],

  /**
   * @name User
   * @type Object
   */
  User: {
    id: 'ID!',
    test: ['MyEnum', { enum: 'MyEnum' }],
    name: 'String',
    age: 'Int',
    description: 'String',
    avatarUrl: ['String', { size: 'Int' }],
    profileUrl: 'String',
    following: '[User]',
    followers: '[User]',
    b: 'String',
    c: 'String',
    d: 'String',
  },

  MyEnum,

  /**
   * @name A
   * @type Object
   */
  A: {
    b: 'B',
  },

  /**
   * @name B
   * @type Object
   */
  B: {
    c: 'Int',
    d: 'Int',
  },

  /**
   * @name TestOrUser
   * @type Union
   */
  TestOrUser: ['User', 'TestB'],

  /**
   * @name TestB
   * @type Object
   * @implements Test
   */
  TestB: {
    a: 'String',
    b: 'String',
  },

  /**
   * @name Test
   * @type Interface
   */
  Test: [
    {
      a: 'String',
    },
    'TestB',
    'TestC',
  ],

  /**
   * @name InputObj
   * @type InputObject
   */
  InputObj: {
    a: 'String!',
  },

  /**
   * @name Mutation
   * @type Object
   */
  Mutation: {
    deleteUser: ['Int!', { id: 'ID!' }],
  },

  /**
   * @name __Schema
   * @type Object
   */
  __Schema: {
    /** A list of all types supported by this server. */
    types: '[__Type!]!',
    /** The type that query operations will be rooted at. */
    queryType: '__Type!',
    /** If this server supports mutation, the type that mutation operations will be rooted at. */
    mutationType: '__Type',
    /** If this server support subscription, the type that subscription operations will be rooted at. */
    subscriptionType: '__Type',
    /** A list of all directives supported by this server. */
    directives: '[__Directive!]!',
  },

  /**
   * @name __Type
   * @type Object
   */
  __Type: {
    kind: '__TypeKind!',
    name: 'String',
    description: 'String',
    fields: ['[__Field!]', { includeDeprecated: 'Boolean' }],
    interfaces: '[__Type!]',
    possibleTypes: '[__Type!]',
    enumValues: ['[__EnumValue!]', { includeDeprecated: 'Boolean' }],
    inputFields: '[__InputValue!]',
    ofType: '__Type',
  },

  __TypeKind,

  /**
   * @name __Field
   * @type Object
   */
  __Field: {
    name: 'String!',
    description: 'String',
    args: '[__InputValue!]!',
    type: '__Type!',
    isDeprecated: 'Boolean!',
    deprecationReason: 'String',
  },

  /**
   * @name __InputValue
   * @type Object
   */
  __InputValue: {
    name: 'String!',
    description: 'String',
    type: '__Type!',
    /** A GraphQL-formatted string representing the default value for this input value. */
    defaultValue: 'String',
  },

  /**
   * @name __EnumValue
   * @type Object
   */
  __EnumValue: {
    name: 'String!',
    description: 'String',
    isDeprecated: 'Boolean!',
    deprecationReason: 'String',
  },

  /**
   * @name __Directive
   * @type Object
   */
  __Directive: {
    name: 'String!',
    description: 'String',
    locations: '[__DirectiveLocation!]!',
    args: '[__InputValue!]!',
  },

  __DirectiveLocation,

  Episode,

  /**
   * @name TestC
   * @type Object
   * @implements Test
   */
  TestC: {
    a: 'String',
    c: 'String',
  },

  /**
   * @name O1
   * @type Object
   * @implements M
   */
  O1: {
    b: ['String', { b: 'String' }],
    o1: 'String',
  },

  /**
   * @name O2
   * @type Object
   * @implements M
   */
  O2: {
    b: ['String', { b: 'String', a: 'String' }],
    o2: 'String',
  },

  fake__Locale,

  fake__Types,

  /**
   * @name fake__imageSize
   * @type InputObject
   */
  fake__imageSize: {
    width: 'Int!',
    height: 'Int!',
  },

  fake__loremSize,

  /**
   * @name fake__color
   * @type InputObject
   */
  fake__color: {
    red255: 'Int',
    green255: 'Int',
    blue255: 'Int',
  },

  /**
   * @name fake__options
   * @type InputObject
   */
  fake__options: {
    useFullAddress: 'Boolean',
    minMoney: 'Float',
    maxMoney: 'Float',
    decimalPlaces: 'Int',
    imageSize: 'fake__imageSize',
    imageKeywords: '[String!]',
    randomizeImageUrl: 'Boolean',
    emailProvider: 'String',
    passwordLength: 'Int',
    loremSize: 'fake__loremSize',
    dateFormat: 'String',
    dateFrom: 'String',
    dateTo: 'String',
    baseColor: 'fake__color',
    minNumber: 'Float',
    maxNumber: 'Float',
    precisionNumber: 'Float',
  },
} as const)
